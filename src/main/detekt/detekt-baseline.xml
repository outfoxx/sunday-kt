<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexCondition:EventParser.kt$EventParser.Companion$data.size > idx + 3 &amp;&amp; data[idx + 1] == LF &amp;&amp; data[idx + 2] == CR &amp;&amp; data[idx + 3] == LF</ID>
    <ID>ComplexMethod:EventSource.kt$EventSource$ private fun dispatchParsedEvent(info: EventParser.EventInfo)</ID>
    <ID>ComplexMethod:OkHttpRequestFactory.kt$OkHttpRequestFactory$private fun parseFailure(response: Response): ThrowableProblem</ID>
    <ID>LongParameterList:RequestFactory.kt$RequestFactory$( method: Method, pathTemplate: String, pathParameters: Parameters? = null, queryParameters: Parameters? = null, body: B? = null, bodyType: KType, contentTypes: List&lt;MediaType>? = null, acceptTypes: List&lt;MediaType>? = null, headers: Parameters? = null, resultType: KType )</ID>
    <ID>LongParameterList:RequestFactory.kt$RequestFactory$( method: Method, pathTemplate: String, pathParameters: Parameters? = null, queryParameters: Parameters? = null, body: B? = null, bodyType: KType? = null, contentTypes: List&lt;MediaType>? = null, acceptTypes: List&lt;MediaType>? = null, headers: Parameters? = null )</ID>
    <ID>LongParameterList:RequestFactory.kt$RequestFactory$( method: Method, pathTemplate: String, pathParameters: Parameters? = null, queryParameters: Parameters? = null, body: B? = null, bodyType: KType? = null, contentTypes: List&lt;MediaType>? = null, acceptTypes: List&lt;MediaType>? = null, headers: Parameters? = null, eventTypes: Map&lt;String, KType> )</ID>
    <ID>LongParameterList:RequestFactory.kt$RequestFactory$( method: Method, pathTemplate: String, pathParameters: Parameters? = null, queryParameters: Parameters? = null, body: B? = null, bodyType: KType?, contentTypes: List&lt;MediaType>? = null, acceptTypes: List&lt;MediaType>? = null, headers: Parameters? = null )</ID>
    <ID>LongParameterList:RequestFactory.kt$RequestFactory$( method: Method, pathTemplate: String, pathParameters: Parameters? = null, queryParameters: Parameters? = null, body: B? = null, contentTypes: List&lt;MediaType>? = null, acceptTypes: List&lt;MediaType>? = null, headers: Parameters? = null )</ID>
    <ID>LongParameterList:RequestFactory.kt$RequestFactory$( method: Method, pathTemplate: String, pathParameters: Parameters? = null, queryParameters: Parameters? = null, body: B? = null, contentTypes: List&lt;MediaType>? = null, acceptTypes: List&lt;MediaType>? = null, headers: Parameters? = null, )</ID>
    <ID>LongParameterList:RequestFactory.kt$RequestFactory$( method: Method, pathTemplate: String, pathParameters: Parameters? = null, queryParameters: Parameters? = null, contentTypes: List&lt;MediaType>? = null, acceptTypes: List&lt;MediaType>? = null, headers: Parameters? = null )</ID>
    <ID>LongParameterList:RequestFactory.kt$RequestFactory$( method: Method, pathTemplate: String, pathParameters: Parameters? = null, queryParameters: Parameters? = null, contentTypes: List&lt;MediaType>? = null, acceptTypes: List&lt;MediaType>? = null, headers: Parameters? = null, )</ID>
    <ID>LongParameterList:RequestFactory.kt$RequestFactory$( method: Method, pathTemplate: String, pathParameters: Parameters? = null, queryParameters: Parameters? = null, contentTypes: List&lt;MediaType>? = null, acceptTypes: List&lt;MediaType>? = null, headers: Parameters? = null, eventTypes: Map&lt;String, KType> )</ID>
    <ID>LoopWithTooManyJumpStatements:EventParser.kt$EventParser$while (curData.size > 0) { val eventSeparatorRange = findEventSeparator(curData) if (eventSeparatorRange == null) { this.unprocessedData = curData break } val eventData = curData.substring(0, eventSeparatorRange.first) curData = curData.substring(eventSeparatorRange.second, curData.size) val eventString = try { eventData.string(charSet) } catch (x: Throwable) { continue } eventStrings.add(eventString) }</ID>
    <ID>LoopWithTooManyJumpStatements:EventParser.kt$EventParser.Companion$for (line in string.split(linSeparators)) { val keyValueSeparatorIdx = line.indexOf(':') val (key, value) = if (keyValueSeparatorIdx != -1) { line.substring(0 until keyValueSeparatorIdx) to line.substring(keyValueSeparatorIdx + 1 until line.length) } else { line to "" } when (key) { "retry" -> info.retry = trimEventField(string = value) "event" -> info.event = trimEventField(string = value) "id" -> info.id = trimEventField(string = value) "data" -> { val currentData = info.data if (currentData != null) { info.data = currentData + trimEventField(string = value) + "\n" } else { info.data = trimEventField(string = value) + "\n" } } // Ignore comments "" -> continue else -> continue } }</ID>
    <ID>MagicNumber:EventParser.kt$EventParser.Companion$3</ID>
    <ID>MagicNumber:EventParser.kt$EventParser.Companion$4</ID>
    <ID>MagicNumber:EventParser.kt$EventParser.Companion$4L</ID>
    <ID>MagicNumber:MediaType.kt$MediaType.Companion$3</ID>
    <ID>MagicNumber:MediaType.kt$MediaType.Companion$4</ID>
    <ID>MagicNumber:MediaType.kt$MediaType.Companion$5</ID>
    <ID>MagicNumber:WWWFormURLEncoder.kt$WWWFormURLEncoder.DateEncoding.FractionalSecondsSinceEpoch$1_000_000_000.0</ID>
    <ID>MaxLineLength:MediaType.kt$MediaType.Companion$"""^([a-z]+|\*)/(x(?:-|\\.)|(?:vnd|prs)\.|\*)?([a-z0-9\-.]+|\*)(?:\+([a-z]+))?( *(?:; *[\w.-]+ *= *[\w.-]+ *)*)$"""</ID>
    <ID>NestedBlockDepth:OkHttpRequestFactory.kt$OkHttpRequestFactory$private fun parseFailure(response: Response): ThrowableProblem</ID>
    <ID>ReturnCount:EventParser.kt$EventParser.Companion$fun findEventSeparator(source: BufferedSource): Pair&lt;Long, Long>?</ID>
    <ID>ReturnCount:EventParser.kt$EventParser.Companion$private fun findEventSeparator(data: ByteString): Pair&lt;Int, Int>?</ID>
    <ID>ReturnCount:MediaType.kt$MediaType.Companion$fun from(string: String): MediaType?</ID>
    <ID>SpreadOperator:MediaType.kt$MediaType$(*parameters)</ID>
    <ID>SwallowedException:EventParser.kt$EventParser$catch (x: Throwable) { continue }</ID>
    <ID>SwallowedException:OkHttpRequestFactory.kt$OkHttpRequestFactory$catch (x: IllegalArgumentException) { NonStandardStatus(response) }</ID>
    <ID>ThrowsCount:OkHttpRequestFactory.kt$OkHttpRequestFactory$private fun &lt;T : Any> parseSuccess(response: Response, resultType: KType): T</ID>
    <ID>TooGenericExceptionCaught:EventParser.kt$EventParser$x: Throwable</ID>
    <ID>TooGenericExceptionCaught:OkHttpRequestFactory.kt$OkHttpRequestFactory$x: Throwable</ID>
    <ID>TooManyFunctions:EventSource.kt$EventSource : Closeable</ID>
    <ID>TooManyFunctions:OkHttpRequestFactory.kt$OkHttpRequestFactory : RequestFactoryCloseable</ID>
    <ID>TooManyFunctions:RequestFactory.kt$RequestFactory : Closeable</ID>
  </CurrentIssues>
</SmellBaseline>
